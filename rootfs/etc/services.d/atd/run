#!/usr/bin/with-contenv bash
#shellcheck shell=bash

# This is a custom implementation of ATD since the original one doesnt seem to work inside Docker
# (C) 2022 by kx1t (Ramon F. Kolb), license: GPLv3.

set -euo pipefail

APPNAME="$(hostname)/atd"
echo "[$(date)][$APPNAME] Starting custom AT daemon ..."

SPOOLDIR="/run/atspool"
PIDFILE=/var/run/atd.pid

# $ATD_INTERVAL determines how often ATD checks if a job needs to get executed. Default = 10 (seconds)
# Note that this will cause a delay of up to $ATD_INTERVAL to execute the job.
# For example, with ATD_INTERVAL=10, a job scheduled for 09:00 may get executed anytime
# between 09:00:00 and 09:00:10.
ATD_INTERVAL=10

# trap SIGINT/SIGHUP/SIGKILL to remove the PID file
trap_with_arg() {
    func="$1" ; shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

func_trap() {
    echo "[$(date)][$APPNAME] Received signal $1; exiting/restarting ATD"
    rm $PIDFILE
    exit
}

trap_with_arg func_trap SIGINT SIGTERM SIGKILL


# write the current PID to the PIDFILE - this is so the `at` command can signal it.
# it doesn't do anything else -- ATD will discover new jobs automatically without the need to signal it
echo "$$" > /var/run/atd.pid

if ! at -V >/dev/null 2>&1
then
    echo "[$(date)][$APPNAME] ATD execution halted: please install the \'at\' package and restart your container."
    sleep infinity
fi

mkdir -p "$SPOOLDIR"

while true
do
    #run this every ATD_INTERVAL seconds. 1 is default but you can increase this number if the system load is too high
    sleep $ATD_INTERVAL

    # Iterate through each of the items in the queue:
    while IFS=$'\n' read -r task
    do
        if [[ -n "$task" ]] && [[ ! -f "$SPOOLDIR/${task%%[[:space:]]*}" ]]
        then
            # check if the scheduled date <= current time and exec task if true
            # run task in the background as not to block the process and
            # delete the task when finished
            if (( $(date -d "$(awk '{print $2,$3,$4,$5,$6}' <<< "$task")" +%s) <= $(date +%s) ))
            then
                echo "[$(date)][$APPNAME] Executing task ${task%%[[:space:]]*}"
                {
                    # we rather execute it as a file than run the sequence through BASH
                    # copy the task to the SPOOLDIR and adjust the attribs to allow execution:
                    at -c ${task%%[[:space:]]*} > "$SPOOLDIR/${task%%[[:space:]]*}"
                    chmod u+rx "$SPOOLDIR/${task%%[[:space:]]*}"

                    # execute the task:
                    "$SPOOLDIR"/"${task%%[[:space:]]*}"

                    # clean up:
                    rm -f "$SPOOLDIR/${task%%[[:space:]]*}"
                    at -d ${task%%[[:space:]]*}
                } &
            fi
        fi
    done <<< $(at -l)
done

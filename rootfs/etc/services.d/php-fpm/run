#!/usr/bin/with-contenv bash
#shellcheck shell=bash

set -euo pipefail

cd "$(dirname "$0")"

# Start php-fpm and confirm it's started by sending a fcgi request through it

progname="php-fpm7.4"
confdir="/etc/php/7.4/fpm"

APPNAME="$(hostname)/php-fpm"

echo "[$(date)][$APPNAME] Started as an s6 service"

pid=''

main() {
        install_traps
        # The latest PHP7.1 fpm package expects this dir to exist based on config
        # changes. It works ok with systemd, but not if you launch fpm directly so we
        # create the dir manually (instead of hacking at rpm supplied config).
        mkdir -p /var/run/php-fpm
        mkdir -p /run/php


        # Make all socket target directories:
        for name in $(grep -hE '^listen\s*=\s*' $confdir/php-fpm.conf $confdir/pool.d/* | sed -r 's/^listen\s*=\s*//' | sed -r 's/;.*$//' | sed 's|/[^/]*$||')
        do
            echo "[$(date)][$APPNAME] Creating $name ..."
            mkdir -p "$name"
        done

        $progname -F --fpm-config $confdir/php-fpm.conf >&2 &
        pid=$!
        # wait for fpm to be ready
        # wait_sockets # this wont work with nginx -- just wait a few secs
        sleep 3
        # let s6 know it's ready
        echo "[$(date)][$APPNAME] $progname is ready"
        # wait for fpm
        wait "$pid"
}

# Catch forced exits
install_traps() {
        # INT = ctrl+c
        # TERM = "kill $pid"
        trap forced_exit INT TERM
}

# If we are forced to exit, tell fpm to exit too
forced_exit() {
        kill "$pid"
}

# List out all the sockets php-fpm is configured to listen on. These images are
# consumed unpredictably so we want to support arbitrary listen directives.
list_sockets() {
        grep -hE '^listen\s*=\s*' $confdir/php-fpm.conf $confdir/pool.d/* \
                | sed -r 's/^listen\s*=\s*//' \
                | sed -r 's/;.*$//'
}

wait_sockets() {
        local socket
        while read -r socket; do
                wait_socket "$socket"
        done < <(list_sockets)
}

wait_socket() {
        local socket="$1"
        local wait_time=10
        local start
        start="$(date +%s)"
        # PHP 5.4 will complain about unknown terminals, so lets set it to null
        export TERM=''
        while ! sudo -u apache php fcgi-test.php "$socket" >&2; do
                # it's taken too long
                if [[ $(($(date +%s) - $start)) -ge "$wait_time" ]]; then
                        exit 1
                fi
                # give the server a little rest
                sleep 0.1
        done
}

main "$@"
